{{- if .Values.podSecurityPolicy.tws.create -}}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ include "codedx-tool-orchestration.rbac.psp.tws.name" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
  annotations:
{{- toYaml .Values.podSecurityPolicy.tws.annotations | trim | nindent 4 }}
spec:
  privileged: false
  allowPrivilegeEscalation: false
  volumes: ["secret", "emptyDir", "configMap"]
  hostNetwork: false
  hostIPC: false
  hostPID: false
  supplementalGroups:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  fsGroup:
    rule: MustRunAs
    ranges:
    - min: 1
      max: 65535
  runAsUser:
    rule: MustRunAsNonRoot
  seLinux:
    rule: RunAsAny
---
{{- end }}


{{- if .Values.podSecurityPolicy.twsWorkflows.create }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ include "codedx-tool-orchestration.rbac.psp.tws-workflows.name" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
  annotations:
{{- toYaml .Values.podSecurityPolicy.twsWorkflows.annotations | trim | nindent 4 }}
spec:
  privileged: false

  # Allow escalation to root user within a workflow container
  #
  allowPrivilegeEscalation: true

  # hostPath is an undesirable permission but is required for argo workflows
  # https://github.com/kubeflow/pipelines/issues/561
  #
  volumes: ["secret", "emptyDir", "hostPath", "downwardAPI", "configMap"]

  # NOTE - This is specifically for docker hosts and will not work with ie containerd.
  # This may become unnecessary in future versions of argo.
  # https://github.com/argoproj/argo/issues/1216
  #
  allowedHostPaths:
  - pathPrefix: /var/run/docker.sock
    readOnly: false
  
  allowedCapabilities:
  - SYS_PTRACE
  - SYS_CHROOT

  hostNetwork: false
  hostIPC: false
  hostPID: false

  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny

  # Note - argo wait container
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
---
{{- end }}


{{- if .Values.podSecurityPolicy.argo.create }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ include "codedx-tool-orchestration.rbac.psp.argo.name" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
  annotations:
{{- toYaml .Values.podSecurityPolicy.argo.annotations | trim | nindent 4 }}
spec:
  privileged: false
  allowPrivilegeEscalation: true
  volumes: ["configMap", "secret"]
  hostNetwork: false
  hostIPC: false
  hostPID: false
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
---
{{ end -}}


{{- if .Values.podSecurityPolicy.minio.create }}
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: {{ include "codedx-tool-orchestration.rbac.psp.minio.name" . | quote }}
  namespace: {{ .Release.Namespace | quote }}
  labels:
    {{- include "codedx-tool-orchestration.commonLabels" . | nindent 4 }}
  annotations:
{{- toYaml .Values.podSecurityPolicy.minio.annotations | trim | nindent 4 }}
spec:
  privileged: false
  allowPrivilegeEscalation: true
  volumes: ["persistentVolumeClaim", "secret", "emptyDir"]
  hostNetwork: false
  hostIPC: false
  hostPID: false
  supplementalGroups:
    rule: RunAsAny
  fsGroup:
    rule: RunAsAny
  runAsUser:
    rule: RunAsAny
  seLinux:
    rule: RunAsAny
{{- end }}
